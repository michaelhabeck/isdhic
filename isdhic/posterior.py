"""
Conditional posteriors
"""
##
## TODO: conditional posteriors should know about the parameters
## whose conditional posterior they represent
##
import numpy as np

from .model import Probability, Likelihood

class ConditionalPosterior(Probability):
    """ConditionalPosterior

    Class representing the conditional posterior of a specific
    parameter (e.g. the Cartesian coordinates). 
    """
    def __init__(self, name, likelihoods=None, priors=None):
        """ConditionalPosterior

        Create the conditional posterior from a list of likelihoods
        and priors that depend on the parameters of interest.

        Parameters
        ----------

        name :
          string specifying a name for the conditional posterior

        likelihoods :
          list of likelihoods that depend on the parameters of
          interest

        priors :
          list of priors that depend on the parameters of interest

        """
        super(ConditionalPosterior, self).__init__(name)

        self.likelihoods = []
        self.priors = []

        for prob in (likelihoods or []) + (priors or []):
            self.add(prob)

    def add(self, prob):
        """
        Add likelihood or prior factor to posterior.
        """
        self.params.update(prob.params, ignore_duplications=True)            
        prob.params = self.params
        
        if isinstance(prob, Likelihood):
            self.likelihoods.append(prob)
        else:
            self.priors.append(prob)

    def __iter__(self):
        """
        Iterator over prior and likelihood factors.
        """
        for p in self.priors:
            yield p
        for p in self.likelihoods:
            yield p

    def __getitem__(self, name):
        """
        Accessing a likelihood or prior by providing its name.
        """
        for p in self:
            if p.name == name:
                return p

        msg = 'Model/prior named "{}" not found'.format(name)
            
        raise KeyError(msg)

    def log_prob(self):
        """
        Total log probability generated by the prior and likelihood
        factors.
        """
        self.update()

        log_p = 0.
        
        for p in self: log_p += p.log_prob()

        return log_p

    def update(self):
        for model in self.likelihoods:
            model.update()

class PosteriorCoordinates(ConditionalPosterior):
    """PosteriorCoordinates

    Conditional posterior over the Cartesian coordinates.
    """
    def update_forces(self):
        """
        Update Cartesian gradient of the factors with respect
        to the Cartesian coordinates. The gradient can be used
        to guide a sampler for generating conformations from
        the conditional posterior. 
        """
        self.update()
        self.params['forces'].set(0.)
        
        for p in self: p.update_forces()

